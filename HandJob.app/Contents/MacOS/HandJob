#!/bin/bash

# Change independent field seperator
SAVEIFS=$IFS
IFS=$'\n'

APP_PATH="$( cd "$(dirname "$0")" ; pwd -P )"
APP_NAME="$(basename "$0")"
BASE_APP_PATH=`echo $APP_PATH | sed -e 's/Contents\/MacOS//g'`

# Check for preferred notifier.
check_gem=`gem list terminal-notifier -i`

## Create functions for repetitious work
# Notification functions
function success () {
  if [[ $check_gem == "true" ]]; then
    echo "Converted: $output_directory/$@" | terminal-notifier -sound default -appIcon "$BASE_APP_PATH/Contents/Resources/$APP_NAME.icns"
  else
    osascript -e "display notification \"App Created: $output_directory/Converted: $@\" with title \"$APP_NAME\""
  fi
}
function failure () {
  if [[ $check_gem == "true" ]]; then
    echo "Failed: $output_directory/$@" | terminal-notifier -sound default -appIcon "$BASE_APP_PATH/Contents/Resources/$APP_NAME.icns"
  else
    osascript -e "display notification \"Failed: $output_directory/$@\" with title \"$APP_NAME\""
  fi
}
function status () {
  if [[ $check_gem == "true" ]]; then
    echo "Status: $@" | terminal-notifier -sound default -appIcon "$BASE_APP_PATH/Contents/Resources/$APP_NAME.icns"
  else
    osascript -e "display notification \"Status: $@\" with title \"$APP_NAME\""
  fi
}
function error {
  if [[ $check_gem == "true" ]]; then
    echo "Exiting: Error" | terminal-notifier -sound default -appIcon "$BASE_APP_PATH/Contents/Resources/$APP_NAME.icns"
  else
    osascript -e "display notification \"Exiting: Error\" with title \"$APP_NAME\""
  fi
}

# Misc work and Errors
function cut_string () {
  echo $@ | cut -d ":" -f 2
}
function check_bool () {
  if [[ $? == 1 ]]; then
    IFS=$SAVEIFS
    error
    exit 1
  fi
}

## This is a first pass at grabbing the status
# # Check Status
# function check_status {
#   is_running=`ps -ef | grep "handbrake" | grep -v grep`
#   if [[ -n $is_running ]]; then
#     status=`tail -1 /Users/scobb/Dropbox/applets/apps/HandJob.app/Contents/Resources/tmp/*.txt | grep "00h"`
#     osascript -e 'tell app "System Events" to display dialog "'$status'" buttons {"Cancel","Folder","Proceed"} default button 3 with title "'$APP_NAME'" with icon {"'$BASE_APP_PATH'/Contents/Resources/'$APP_NAME'.icns"}'
#   fi
# }

# check_status

## One Liner to do dvd episodes: 
#for i in `seq 4`; do ./handbrake --input /Volumes/E1587/ --title $i --preset Normal --output ~/Desktop/NameOfDisc_Title$i.mp4; done

# Prompt for file/folder input
input_selector=`osascript -e 'tell app "System Events" to display dialog "Select a File or Folder?" buttons {"Cancel","Folder","File"} default button 3 with title "'$APP_NAME'" with icon {"'$BASE_APP_PATH'/Contents/Resources/'$APP_NAME'.icns"}'` 
check_bool $input_selector
input_selection=`cut_string $input_selector`

# Do a check for input selection file/folder and create array
if [[ $input_selection == "File" ]]; then
  files=`osascript -e 'tell application "System Events" to return POSIX path of (choose file)'`
  check_bool $files
  file_list=`find "$files"`
  input_directory=`dirname "$files"`
else
  files=`osascript -e 'tell application "System Events" to return POSIX path of (choose folder)'`
  check_bool $files
  file_list=`find "$files" -not -path '*/\.*'  \( -iname "*.avi" -o -iname "*.mkv" -o -iname "*.mp4" -o -iname "*.mpg" \)`
  input_directory="$files"  
fi

# Prompt for folder output
output_selector=`osascript -e 'tell app "System Events" to display dialog "Select Output Directory. (Default:Input)" buttons {"Cancel","Select","Default"} default button 3 with title "'$APP_NAME'" with icon {"'$BASE_APP_PATH'/Contents/Resources/'$APP_NAME'.icns"}'`
check_bool $output_selector
output_selection=`cut_string $output_selector`

# Do a check for output selection default/other
if [[ $output_selection == "Default" ]]; then 
  output_directory=$input_directory 
else
  output_directory=`osascript -e 'tell application "System Events" to return POSIX path of (choose folder)'`
  check_bool $output_directory
fi

preset=`osascript -e 'tell application "System Events" to activate' -e 'tell application "System Events" to return (choose from list { "Universal", "iPod", "iPhone & iPod Touch", "iPad", "AppleTV", "AppleTV 2", "AppleTV 3", "Android", "Android Tablet", "Normal", "High Profile" } with prompt "Choose a Preset" with title "Preset Selector" OK button name "Select" cancel button name "Quit")'`
prompt_extension=`osascript -e 'tell app "System Events" to display dialog "Select Output Extension." buttons {"mkv","mp4"} default button 2 with title "'$APP_NAME'" with icon {"'$BASE_APP_PATH'/Contents/Resources/'$APP_NAME'.icns"}'`
extension=`cut_string $prompt_extension`

# Do the work
for file in $file_list; do
  base_filename=`basename $file`
  $BASE_APP_PATH/Contents/Resources/bin/handbrake -i "$file" -o $output_directory/"${base_filename%.***}.$extension" --preset="$preset" > $BASE_APP_PATH/Contents/Resources/tmp/$base_filename.txt
  check_bool
  success "${base_filename%.***}.$extension"
  rm -f $BASE_APP_PATH/Contents/Resources/tmp/$base_filename.txt
done

IFS=$SAVEIFS
